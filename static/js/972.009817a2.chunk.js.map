{"version":3,"file":"static/js/972.009817a2.chunk.js","mappings":"+PA4BA,EA1BmB,SAAC,GAAiB,IAAfA,EAAc,EAAdA,QACpB,OACE,wBACGA,EAAQC,KAAI,SAAAC,GACX,IAAQC,EAAwBD,EAAxBC,GAAIC,EAAoBF,EAApBE,OAAQC,EAAYH,EAAZG,QACpB,OACE,2BACE,uBAAID,KACJ,uBAAIC,MAFGF,EAKZ,KAGN,ECXc,SAASG,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,WAAS,GAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOT,EAAP,KAAgBc,EAAhB,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,gGAESV,EAFT,wDAGII,GAAW,GAHf,UAIiCO,EAAAA,EAAAA,IAC3BX,EACAS,EAAWG,QANjB,OAIUC,EAJV,OAQIN,EAAWM,EAAeC,SAR9B,kDAUIR,EAAS,EAAD,IAVZ,yBAYIF,GAAW,GAZf,8EAHc,sBAoBd,OApBc,mCAkBdW,GAEO,kBAAMN,EAAWO,OAAjB,CACR,GAAE,CAAChB,KAGF,+BACGG,IAAW,uBAAG,mBACJ,KAAVE,IAAgB,uBAAG,yBACnBZ,EAAQwB,OAAS,IAAK,SAAC,EAAD,CAAYxB,QAASA,IACxB,IAAnBA,EAAQwB,SACP,yBAAK,+CAIZ,C,uNC1CKC,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAClB,IAAMC,EAAW,kCAEXC,EAAW,mCAAG,WAAMC,GAAN,uFACFH,EAAAA,EAAAA,IAAA,sBAAiC,CACtDI,OAAQ,CACNC,SAAU,QACVC,QAASP,GAEXN,OAAQU,IANe,cACnBI,EADmB,yBAQlBA,EAASC,MARS,2CAAH,sDAWXC,EAAgB,mCAAG,WAAOC,EAAWP,GAAlB,uFACPH,EAAAA,EAAAA,IAAA,gBAA2B,CAChDI,OAAQ,CACNO,MAAOD,EACPJ,QAASP,GAEXN,OAAQU,IANoB,cACxBI,EADwB,yBAQvBA,EAASC,MARc,2CAAH,wDAWhBI,EAAiB,mCAAG,WAAO/B,EAAP,mFAAkBsB,EAAlB,EAAkBA,iBAAlB,SACRH,EAAAA,EAAAA,IAAA,iBAAoBnB,GAAW,CACpDuB,OAAQ,CACNC,SAAU,QACVC,QAASP,GAEXN,OAAQU,IANqB,cACzBI,EADyB,yBASxBA,EAASC,MATe,2CAAH,wDAYjBhB,EAAiB,mCAAG,WAAOX,EAAP,mFAAkBsB,EAAlB,EAAkBA,iBAAlB,SACRH,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNC,SAAU,QACVC,QAASP,GAEXN,OAAQU,IANqB,cACzBI,EADyB,yBAQxBA,EAASC,MARe,2CAAH,wDAWjBK,EAAiB,mCAAG,WAAOhC,EAAP,mFAAkBsB,EAAlB,EAAkBA,iBAAlB,SACRH,EAAAA,EAAAA,IAAA,iBAAoBnB,EAApB,YAAuC,CAC5DuB,OAAQ,CACNC,SAAU,QACVC,QAASP,GAEXN,OAAQU,IANqB,cACzBI,EADyB,yBAQxBA,EAASC,MARe,2CAAH,uD","sources":["components/ReviewList.js","components/Reviews.js","movie-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst ReviewList = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews.map(review => {\n        const { id, author, content } = review;\n        return (\n          <li key={id}>\n            <p>{author}</p>\n            <p>{content}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nReviewList.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      author: PropTypes.string,\n      content: PropTypes.string,\n      id: PropTypes.string,\n    })\n  ),\n};\n\nexport default ReviewList;\n","import { fetchMovieReviews } from 'movie-api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ReviewList from './ReviewList';\n\nexport default function Reviews() {\n  const { movieId } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getReview() {\n      try {\n        if (!movieId) return;\n        setLoading(false);\n        const fetchedReviews = await fetchMovieReviews(\n          movieId,\n          controller.signal\n        );\n        setReviews(fetchedReviews.results);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getReview();\n\n    return () => controller.abort();\n  }, [movieId]);\n\n  return (\n    <section>\n      {loading && <p>Please wait...</p>}\n      {error !== '' && <p>Something went wrong</p>}\n      {reviews.length > 0 && <ReviewList reviews={reviews} />}\n      {reviews.length === 0 && (\n        <div>We don't have any reviews for this movie</div>\n      )}\n    </section>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = 'be88e8b6abee602da2d38b01a63dd167';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const imageURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchMovies = async controllerSignal => {\n  const responce = await axios.get(`/trending/movie/day`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchSearchMovie = async (movieName, controllerSignal) => {\n  const responce = await axios.get(`/search/movie`, {\n    params: {\n      query: movieName,\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchMovieDetails = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(`/movie/${movieId}`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n\n  return responce.data;\n};\n\nexport const fetchMovieReviews = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchMovieCredits = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n"],"names":["reviews","map","review","id","author","content","Reviews","movieId","useParams","useState","loading","setLoading","error","setError","setReviews","useEffect","controller","AbortController","fetchMovieReviews","signal","fetchedReviews","results","getReview","abort","length","API_KEY","axios","imageURL","fetchMovies","controllerSignal","params","language","api_key","responce","data","fetchSearchMovie","movieName","query","fetchMovieDetails","fetchMovieCredits"],"sourceRoot":""}
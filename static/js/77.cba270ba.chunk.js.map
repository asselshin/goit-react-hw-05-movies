{"version":3,"file":"static/js/77.cba270ba.chunk.js","mappings":"6PAoCA,EAjCiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAClB,OACE,wBACGA,EAAKC,KAAI,SAAAC,GACR,OACE,0BACwB,OAArBA,EAAIC,eACH,gBACEC,IAAG,UAAKC,EAAAA,GAAL,YAAiBH,EAAIC,cACxBG,IAAKJ,EAAIK,KACTC,MAAM,WAGV,uBAAIN,EAAIO,iBACR,yBAAG,cAAYP,EAAIQ,eATZR,EAAIS,GAYhB,KAGN,EClBc,SAASC,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOf,EAAP,KAAaoB,EAAb,KAqBA,OAnBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,oGAEIJ,GAAW,GACXF,EAAS,IAHb,UAI8BO,EAAAA,EAAAA,IAAkBX,EAASS,EAAWG,QAJpE,OAIUC,EAJV,OAKIN,EAAQM,EAAY1B,MALxB,gDAOIiB,EAAS,EAAD,IAPZ,yBASIE,GAAW,GATf,6EAHc,sBAgBd,OAhBc,mCAedQ,GACO,kBAAML,EAAWM,OAAjB,CACR,GAAE,CAACf,KAGF,+BACGK,IAAW,uBAAG,mBACJ,KAAVF,IAAgB,uBAAIA,IACX,OAAThB,IAAiB,SAAC,EAAD,CAAUA,KAAMA,MAGvC,C,uNCnCK6B,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAClB,IAAMzB,EAAW,sCAEX0B,EAAW,mCAAG,WAAMC,GAAN,uFACFF,EAAAA,EAAAA,IAAA,sCAAyCD,GAAW,CACzEI,OAAQ,CAAEC,SAAU,SACpBT,OAAQO,IAHe,cACnBG,EADmB,yBAKlBA,EAASC,MALS,2CAAH,sDAQXC,EAAgB,mCAAG,WAAOC,EAAP,mFAAoBN,EAApB,EAAoBA,iBAApB,SACPF,EAAAA,EAAAA,IAAA,gBAA2B,CAChDG,OAAQ,CACNM,MAAOD,EACPE,QAASX,EACTJ,OAAQO,KALkB,cACxBG,EADwB,yBAQvBA,EAASC,MARc,2CAAH,wDAWhBK,EAAiB,mCAAG,WAAO5B,EAAP,mFAAkBmB,EAAlB,EAAkBA,iBAAlB,SACRF,EAAAA,EAAAA,IAAA,iBAAoBjB,EAApB,oBAAuCgB,GAAW,CACvEI,OAAQ,CAAEC,SAAU,SACpBT,OAAQO,IAHqB,cACzBG,EADyB,yBAKxBA,EAASC,MALe,2CAAH,wDAQjBM,EAAiB,mCAAG,WAAO7B,EAAP,mFAAkBmB,EAAlB,EAAkBA,iBAAlB,SACRF,EAAAA,EAAAA,IAAA,iBACXjB,EADW,4BACgBgB,GACrC,CACEI,OAAQ,CAAER,OAAQO,KAJS,cACzBG,EADyB,yBAOxBA,EAASC,MAPe,2CAAH,wDAUjBZ,EAAiB,mCAAG,WAAOX,EAAP,mFAAkBmB,EAAlB,EAAkBA,iBAAlB,SACRF,EAAAA,EAAAA,IAAA,iBACXjB,EADW,4BACgBgB,GACrC,CACEI,OAAQ,CAAER,OAAQO,KAJS,cACzBG,EADyB,yBAOxBA,EAASC,MAPe,2CAAH,uD","sources":["components/CastList.js","components/Cast.js","movie-api.js"],"sourcesContent":["import { imageURL } from 'movie-api';\nimport PropTypes from 'prop-types';\n\nconst CastList = ({ cast }) => {\n  return (\n    <ul>\n      {cast.map(man => {\n        return (\n          <li key={man.id}>\n            {man.profile_path !== null && (\n              <img\n                src={`${imageURL}/${man.profile_path}`}\n                alt={man.name}\n                width=\"100px\"\n              />\n            )}\n            <p>{man.original_name}</p>\n            <p>Character: {man.character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      profile_path: PropTypes.string,\n      name: PropTypes.string,\n      original_name: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ),\n};\n\nexport default CastList;\n","import { fetchMovieCredits } from 'movie-api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CastList from './CastList';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getCast() {\n      try {\n        setLoading(true);\n        setError('');\n        const fetchedCast = await fetchMovieCredits(movieId, controller.signal);\n        setCast(fetchedCast.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getCast();\n    return () => controller.abort();\n  }, [movieId]);\n\n  return (\n    <section>\n      {loading && <p>Please wait...</p>}\n      {error !== '' && <p>{error}</p>}\n      {cast !== null && <CastList cast={cast} />}\n    </section>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = 'be88e8b6abee602da2d38b01a63dd167';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const imageURL = 'https://image.tmdb.org/t/p/original';\n\nexport const fetchMovies = async controllerSignal => {\n  const responce = await axios.get(`/trending/movie/day?api_key=${API_KEY}`, {\n    params: { language: 'en-US' },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchSearchMovie = async (movieName, { controllerSignal }) => {\n  const responce = await axios.get(`/search/movie`, {\n    params: {\n      query: movieName,\n      api_key: API_KEY,\n      signal: controllerSignal,\n    },\n  });\n  return responce.data;\n};\n\nexport const fetchMovieDetails = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`, {\n    params: { language: 'en-US' },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchMovieReviews = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}`,\n    {\n      params: { signal: controllerSignal },\n    }\n  );\n  return responce.data;\n};\n\nexport const fetchMovieCredits = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}`,\n    {\n      params: { signal: controllerSignal },\n    }\n  );\n  return responce.data;\n};\n"],"names":["cast","map","man","profile_path","src","imageURL","alt","name","width","original_name","character","id","Cast","movieId","useParams","useState","error","setError","loading","setLoading","setCast","useEffect","controller","AbortController","fetchMovieCredits","signal","fetchedCast","getCast","abort","API_KEY","axios","fetchMovies","controllerSignal","params","language","responce","data","fetchSearchMovie","movieName","query","api_key","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}
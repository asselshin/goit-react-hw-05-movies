{"version":3,"file":"static/js/77.ba2e2e2d.chunk.js","mappings":"6PAwCA,EAlCiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KAClB,OACE,wBACGA,EAAKC,KAAI,SAAAC,GACR,IAAQC,EAAqDD,EAArDC,GAAIC,EAAiDF,EAAjDE,aAAcC,EAAmCH,EAAnCG,KAAMC,EAA6BJ,EAA7BI,cAAeC,EAAcL,EAAdK,UAC/C,OACE,0BACoB,OAAjBH,IACC,gBACEI,IAAKJ,EAAY,UAAMK,EAAAA,GAAN,YAAkBL,GAXjD,+EAYcM,IAAKL,EACLM,MAAM,WAGV,uBAAIL,KACJ,yBAAG,cAAYC,OATRJ,EAYZ,KAGN,ECtBc,SAASS,IACtB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOf,EAAP,KAAaoB,EAAb,KAsBA,OApBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAa,IAAIC,gBADT,wCAGd,gGAESV,EAFT,wDAGIM,GAAW,GACXF,EAAS,IAJb,UAK8BO,EAAAA,EAAAA,IAAkBX,EAASS,EAAWG,QALpE,OAKUC,EALV,OAMIN,EAAQM,EAAY1B,MANxB,kDAQIiB,EAAS,EAAD,IARZ,yBAUIE,GAAW,GAVf,8EAHc,sBAiBd,OAjBc,mCAgBdQ,GACO,kBAAML,EAAWM,OAAjB,CACR,GAAE,CAACf,KAGF,+BACGK,IAAW,uBAAG,mBACJ,KAAVF,IAAgB,uBAAIA,IACX,OAAThB,IAAiB,SAAC,EAAD,CAAUA,KAAMA,MAGvC,C,uNCpCK6B,EAAU,mCAChBC,EAAAA,EAAAA,SAAAA,QAAyB,+BAClB,IAAMrB,EAAW,kCAEXsB,EAAW,mCAAG,WAAMC,GAAN,uFACFF,EAAAA,EAAAA,IAAA,sBAAiC,CACtDG,OAAQ,CACNC,SAAU,QACVC,QAASN,GAEXJ,OAAQO,IANe,cACnBI,EADmB,yBAQlBA,EAASC,MARS,2CAAH,sDAWXC,EAAgB,mCAAG,WAAOC,EAAWP,GAAlB,uFACPF,EAAAA,EAAAA,IAAA,gBAA2B,CAChDG,OAAQ,CACNO,MAAOD,EACPJ,QAASN,GAEXJ,OAAQO,IANoB,cACxBI,EADwB,yBAQvBA,EAASC,MARc,2CAAH,wDAWhBI,EAAiB,mCAAG,WAAO5B,EAAP,mFAAkBmB,EAAlB,EAAkBA,iBAAlB,SACRF,EAAAA,EAAAA,IAAA,iBAAoBjB,GAAW,CACpDoB,OAAQ,CACNC,SAAU,QACVC,QAASN,GAEXJ,OAAQO,IANqB,cACzBI,EADyB,yBASxBA,EAASC,MATe,2CAAH,wDAYjBK,EAAiB,mCAAG,WAAO7B,EAAP,mFAAkBmB,EAAlB,EAAkBA,iBAAlB,SACRF,EAAAA,EAAAA,IAAA,iBAAoBjB,EAApB,YAAuC,CAC5DoB,OAAQ,CACNC,SAAU,QACVC,QAASN,GAEXJ,OAAQO,IANqB,cACzBI,EADyB,yBAQxBA,EAASC,MARe,2CAAH,wDAWjBb,EAAiB,mCAAG,WAAOX,EAAP,mFAAkBmB,EAAlB,EAAkBA,iBAAlB,SACRF,EAAAA,EAAAA,IAAA,iBAAoBjB,EAApB,YAAuC,CAC5DoB,OAAQ,CACNC,SAAU,QACVC,QAASN,GAEXJ,OAAQO,IANqB,cACzBI,EADyB,yBAQxBA,EAASC,MARe,2CAAH,uD","sources":["components/CastList.js","components/Cast.js","movie-api.js"],"sourcesContent":["import { imageURL } from 'movie-api';\nimport PropTypes from 'prop-types';\n\nconst defaultImg =\n  'https://www.baumandblume.com/wp-content/uploads/2017/02/no-image-icon-md.png';\n\nconst CastList = ({ cast }) => {\n  return (\n    <ul>\n      {cast.map(man => {\n        const { id, profile_path, name, original_name, character } = man;\n        return (\n          <li key={id}>\n            {profile_path !== null && (\n              <img\n                src={profile_path ? `${imageURL}/${profile_path}` : defaultImg}\n                alt={name}\n                width=\"100px\"\n              />\n            )}\n            <p>{original_name}</p>\n            <p>Character: {character}</p>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\nCastList.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      profile_path: PropTypes.string,\n      name: PropTypes.string,\n      original_name: PropTypes.string,\n      character: PropTypes.string,\n    })\n  ),\n};\n\nexport default CastList;\n","import { fetchMovieCredits } from 'movie-api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport CastList from './CastList';\n\nexport default function Cast() {\n  const { movieId } = useParams();\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [cast, setCast] = useState(null);\n\n  useEffect(() => {\n    const controller = new AbortController();\n\n    async function getCast() {\n      try {\n        if (!movieId) return;\n        setLoading(true);\n        setError('');\n        const fetchedCast = await fetchMovieCredits(movieId, controller.signal);\n        setCast(fetchedCast.cast);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    getCast();\n    return () => controller.abort();\n  }, [movieId]);\n\n  return (\n    <section>\n      {loading && <p>Please wait...</p>}\n      {error !== '' && <p>{error}</p>}\n      {cast !== null && <CastList cast={cast} />}\n    </section>\n  );\n}\n","import axios from 'axios';\n\nconst API_KEY = 'be88e8b6abee602da2d38b01a63dd167';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nexport const imageURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const fetchMovies = async controllerSignal => {\n  const responce = await axios.get(`/trending/movie/day`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchSearchMovie = async (movieName, controllerSignal) => {\n  const responce = await axios.get(`/search/movie`, {\n    params: {\n      query: movieName,\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchMovieDetails = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(`/movie/${movieId}`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n\n  return responce.data;\n};\n\nexport const fetchMovieReviews = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(`/movie/${movieId}/reviews`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n\nexport const fetchMovieCredits = async (movieId, { controllerSignal }) => {\n  const responce = await axios.get(`/movie/${movieId}/credits`, {\n    params: {\n      language: 'en-US',\n      api_key: API_KEY,\n    },\n    signal: controllerSignal,\n  });\n  return responce.data;\n};\n"],"names":["cast","map","man","id","profile_path","name","original_name","character","src","imageURL","alt","width","Cast","movieId","useParams","useState","error","setError","loading","setLoading","setCast","useEffect","controller","AbortController","fetchMovieCredits","signal","fetchedCast","getCast","abort","API_KEY","axios","fetchMovies","controllerSignal","params","language","api_key","responce","data","fetchSearchMovie","movieName","query","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}